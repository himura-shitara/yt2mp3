#!/bin/bash

# スクリプト名を固定
SCRIPT_NAME="main.py"

# スクリプトのディレクトリを取得
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# 仮想環境のディレクトリ
VENV_DIR="$SCRIPT_DIR/.venv"

# ダウンロードディレクトリ
DOWNLOAD_DIR="$SCRIPT_DIR/downloads"

# FFmpegのダウンロードURL（MacOS用）
FFMPEG_URL="https://evermeet.cx/ffmpeg/getrelease/zip"

# 使用方法を表示する関数
show_usage() {
    echo "使用方法: ダブルクリックして実行し、プロンプトに従ってURLを入力してください。"
}

# 仮想環境の作成と依存関係のインストールを行う関数
setup_virtual_environment() {
    if [ ! -d "$VENV_DIR" ]; then
        echo "仮想環境を作成しています..."
        python3 -m venv "$VENV_DIR"
    fi

    # 仮想環境をアクティベート
    source "$VENV_DIR/bin/activate"

    # yt-dlpのインストール
    echo "yt-dlpをインストールしています..."
    pip install yt-dlp
}

# FFmpegのダウンロードとセットアップを行う関数
setup_ffmpeg() {
    if [ ! -f "$VENV_DIR/bin/ffmpeg" ]; then
        echo "FFmpegをダウンロードしています..."
        curl -L -o ffmpeg.zip "$FFMPEG_URL"
        unzip -q ffmpeg.zip -d "$VENV_DIR/bin/"
        rm ffmpeg.zip
        chmod +x "$VENV_DIR/bin/ffmpeg"
        echo "FFmpegのセットアップが完了しました。"
    else
        echo "FFmpegは既にセットアップされています。"
    fi
}

# メイン処理
main() {
    # 仮想環境のセットアップ
    setup_virtual_environment

    # FFmpegのセットアップ
    setup_ffmpeg

    # ダウンロードディレクトリの作成
    mkdir -p "$DOWNLOAD_DIR"

    # ユーザーにURLの入力を求める
    read -p "YouTubeのURLを入力してください: " URL

    # URLが空でないことを確認
    if [ -z "$URL" ]; then
        echo "エラー: URLが提供されていません。"
        show_usage
        exit 1
    fi

    # yt-dlpを使用して音声をダウンロード
    yt-dlp -x --audio-format mp3 --audio-quality 0 -o "$DOWNLOAD_DIR/%(title)s.%(ext)s" --ffmpeg-location "$VENV_DIR/bin/ffmpeg" "$URL"

    # ダウンロードの成功を確認
    if [ $? -eq 0 ]; then
        echo "ダウンロードが完了しました。ファイルは $(basename "$DOWNLOAD_DIR") ディレクトリに保存されています。"
    else
        echo "ダウンロード中にエラーが発生しました。"
    fi

    # 仮想環境を非アクティブ化
    deactivate
}

# メイン処理の実行
main "$@"
